{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tusha\\\\Desktop\\\\digikull everyday\\\\reactapp\\\\src\\\\todolist\\\\todolist.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { useState } from 'react';\nimport './todoapp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoApp() {\n  _s();\n\n  const [task, setTask] = useState(\"\");\n  const [tasklist, setTaskList] = useState([]);\n\n  const handleChange = e => {\n    setTask(e.target.value);\n  };\n\n  const AddTask = () => {\n    if (task !== \"\") {\n      const taskDetails = {\n        //   id: Math.floor(Math.random() * 1000),\n        value: task,\n        isCompleted: false\n      };\n      setTaskList([...tasklist, taskDetails]);\n    }\n  };\n\n  const deletetask = (e, id) => {\n    e.preventDefault();\n    setTaskList(tasklist.filter(t => t.id != id));\n  };\n\n  const taskCompleted = (e, id) => {\n    e.preventDefault(); //let's find index of element\n\n    const element = tasklist.findIndex(elem => elem.id == id); //copy array into new variable\n\n    const newTaskList = [...tasklist]; //edit our element\n\n    newTaskList[element] = { ...newTaskList[element],\n      isCompleted: true\n    };\n    setTaskList(newTaskList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"text\",\n      id: \"text\",\n      onChange: e => handleChange(e),\n      placeholder: \"Add task here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-btn\",\n      onClick: AddTask,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), tasklist !== [] ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasklist.map(t => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: t.isCompleted ? \"crossText\" : \"listitem\",\n        children: [t.value, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"completed\",\n          onClick: e => taskCompleted(e, t.id),\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete\",\n          onClick: e => deletetask(e, t.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this);\n}\n\n_s(TodoApp, \"AEA8V6nRm/ZkndsJpoYzs0i0yzE=\");\n\n_c = TodoApp;\nexport default connect()(TodoApp);\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoApp\");","map":{"version":3,"sources":["C:/Users/tusha/Desktop/digikull everyday/reactapp/src/todolist/todolist.jsx"],"names":["React","connect","useState","TodoApp","task","setTask","tasklist","setTaskList","handleChange","e","target","value","AddTask","taskDetails","isCompleted","deletetask","id","preventDefault","filter","t","taskCompleted","element","findIndex","elem","newTaskList","map"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {useState  } from 'react'\r\nimport './todoapp.css'\r\n\r\nfunction TodoApp() {\r\n    const [task, setTask] = useState(\"\");\r\n    const [tasklist, setTaskList] = useState([]);\r\n  \r\n    const handleChange = (e) => {\r\n      setTask(e.target.value);\r\n    };\r\n  \r\n    const AddTask = () => {\r\n      if (task !== \"\") {\r\n        const taskDetails = {\r\n        //   id: Math.floor(Math.random() * 1000),\r\n          value: task,\r\n          isCompleted: false,\r\n        };\r\n  \r\n        setTaskList([...tasklist, taskDetails]);\r\n      }\r\n    };\r\n  \r\n    const deletetask = (e, id) => {\r\n      e.preventDefault();\r\n      setTaskList(tasklist.filter((t) => t.id != id));\r\n    };\r\n  \r\n    const taskCompleted = (e, id) => {\r\n      e.preventDefault();\r\n      //let's find index of element\r\n      const element = tasklist.findIndex((elem) => elem.id == id);\r\n  \r\n      //copy array into new variable\r\n      const newTaskList = [...tasklist];\r\n  \r\n      //edit our element\r\n      newTaskList[element] = {\r\n        ...newTaskList[element],\r\n        isCompleted: true,\r\n      };\r\n  \r\n      setTaskList(newTaskList);\r\n    };\r\n  \r\n    return (\r\n      <div className=\"todo\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"text\"\r\n          id=\"text\"\r\n          onChange={(e) => handleChange(e)}\r\n          placeholder=\"Add task here...\"\r\n        />\r\n        <button className=\"add-btn\" onClick={AddTask}>\r\n          Add\r\n        </button>\r\n        <br />\r\n        {tasklist !== [] ? (\r\n          <ul>\r\n            {tasklist.map((t) => (\r\n              <li className={t.isCompleted ? \"crossText\" : \"listitem\"}>\r\n                {t.value}\r\n                <button\r\n                  className=\"completed\"\r\n                  onClick={(e) => taskCompleted(e, t.id)}\r\n                >\r\n                  Completed\r\n                </button>\r\n  \r\n                <button className=\"delete\" onClick={(e) => deletetask(e, t.id)}>\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n  \r\nexport default connect()(TodoApp)"]},"metadata":{},"sourceType":"module"}